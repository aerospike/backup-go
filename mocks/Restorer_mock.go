// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aerospike/backup-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRestorer creates a new instance of MockRestorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRestorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRestorer {
	mock := &MockRestorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRestorer is an autogenerated mock type for the Restorer type
type MockRestorer struct {
	mock.Mock
}

type MockRestorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRestorer) EXPECT() *MockRestorer_Expecter {
	return &MockRestorer_Expecter{mock: &_m.Mock}
}

// GetMetrics provides a mock function for the type MockRestorer
func (_mock *MockRestorer) GetMetrics() *models.Metrics {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 *models.Metrics
	if returnFunc, ok := ret.Get(0).(func() *models.Metrics); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}
	return r0
}

// MockRestorer_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockRestorer_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
func (_e *MockRestorer_Expecter) GetMetrics() *MockRestorer_GetMetrics_Call {
	return &MockRestorer_GetMetrics_Call{Call: _e.mock.On("GetMetrics")}
}

func (_c *MockRestorer_GetMetrics_Call) Run(run func()) *MockRestorer_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRestorer_GetMetrics_Call) Return(metrics *models.Metrics) *MockRestorer_GetMetrics_Call {
	_c.Call.Return(metrics)
	return _c
}

func (_c *MockRestorer_GetMetrics_Call) RunAndReturn(run func() *models.Metrics) *MockRestorer_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetStats provides a mock function for the type MockRestorer
func (_mock *MockRestorer) GetStats() *models.RestoreStats {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *models.RestoreStats
	if returnFunc, ok := ret.Get(0).(func() *models.RestoreStats); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RestoreStats)
		}
	}
	return r0
}

// MockRestorer_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockRestorer_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
func (_e *MockRestorer_Expecter) GetStats() *MockRestorer_GetStats_Call {
	return &MockRestorer_GetStats_Call{Call: _e.mock.On("GetStats")}
}

func (_c *MockRestorer_GetStats_Call) Run(run func()) *MockRestorer_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRestorer_GetStats_Call) Return(restoreStats *models.RestoreStats) *MockRestorer_GetStats_Call {
	_c.Call.Return(restoreStats)
	return _c
}

func (_c *MockRestorer_GetStats_Call) RunAndReturn(run func() *models.RestoreStats) *MockRestorer_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function for the type MockRestorer
func (_mock *MockRestorer) Wait(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRestorer_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockRestorer_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - ctx
func (_e *MockRestorer_Expecter) Wait(ctx interface{}) *MockRestorer_Wait_Call {
	return &MockRestorer_Wait_Call{Call: _e.mock.On("Wait", ctx)}
}

func (_c *MockRestorer_Wait_Call) Run(run func(ctx context.Context)) *MockRestorer_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRestorer_Wait_Call) Return(err error) *MockRestorer_Wait_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRestorer_Wait_Call) RunAndReturn(run func(ctx context.Context) error) *MockRestorer_Wait_Call {
	_c.Call.Return(run)
	return _c
}
