// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aerospike/backup-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRecordReader creates a new instance of MockRecordReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecordReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecordReader {
	mock := &MockRecordReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRecordReader is an autogenerated mock type for the RecordReader type
type MockRecordReader struct {
	mock.Mock
}

type MockRecordReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecordReader) EXPECT() *MockRecordReader_Expecter {
	return &MockRecordReader_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockRecordReader
func (_mock *MockRecordReader) Close() {
	_mock.Called()
	return
}

// MockRecordReader_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockRecordReader_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockRecordReader_Expecter) Close() *MockRecordReader_Close_Call {
	return &MockRecordReader_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockRecordReader_Close_Call) Run(run func()) *MockRecordReader_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecordReader_Close_Call) Return() *MockRecordReader_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecordReader_Close_Call) RunAndReturn(run func()) *MockRecordReader_Close_Call {
	_c.Run(run)
	return _c
}

// Read provides a mock function for the type MockRecordReader
func (_mock *MockRecordReader) Read(ctx context.Context) (*models.Token, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *models.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*models.Token, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *models.Token); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRecordReader_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockRecordReader_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx
func (_e *MockRecordReader_Expecter) Read(ctx interface{}) *MockRecordReader_Read_Call {
	return &MockRecordReader_Read_Call{Call: _e.mock.On("Read", ctx)}
}

func (_c *MockRecordReader_Read_Call) Run(run func(ctx context.Context)) *MockRecordReader_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRecordReader_Read_Call) Return(token *models.Token, err error) *MockRecordReader_Read_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockRecordReader_Read_Call) RunAndReturn(run func(ctx context.Context) (*models.Token, error)) *MockRecordReader_Read_Call {
	_c.Call.Return(run)
	return _c
}
