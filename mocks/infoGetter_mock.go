// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockinfoGetter is an autogenerated mock type for the infoGetter type
type MockinfoGetter struct {
	mock.Mock
}

type MockinfoGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockinfoGetter) EXPECT() *MockinfoGetter_Expecter {
	return &MockinfoGetter_Expecter{mock: &_m.Mock}
}

// GetRackNodes provides a mock function with given fields: rackID
func (_m *MockinfoGetter) GetRackNodes(rackID int) ([]string, error) {
	ret := _m.Called(rackID)

	if len(ret) == 0 {
		panic("no return value specified for GetRackNodes")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]string, error)); ok {
		return rf(rackID)
	}
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(rackID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(rackID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockinfoGetter_GetRackNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRackNodes'
type MockinfoGetter_GetRackNodes_Call struct {
	*mock.Call
}

// GetRackNodes is a helper method to define mock.On call
//   - rackID int
func (_e *MockinfoGetter_Expecter) GetRackNodes(rackID interface{}) *MockinfoGetter_GetRackNodes_Call {
	return &MockinfoGetter_GetRackNodes_Call{Call: _e.mock.On("GetRackNodes", rackID)}
}

func (_c *MockinfoGetter_GetRackNodes_Call) Run(run func(rackID int)) *MockinfoGetter_GetRackNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockinfoGetter_GetRackNodes_Call) Return(_a0 []string, _a1 error) *MockinfoGetter_GetRackNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockinfoGetter_GetRackNodes_Call) RunAndReturn(run func(int) ([]string, error)) *MockinfoGetter_GetRackNodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordCount provides a mock function with given fields: namespace, sets
func (_m *MockinfoGetter) GetRecordCount(namespace string, sets []string) (uint64, error) {
	ret := _m.Called(namespace, sets)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordCount")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (uint64, error)); ok {
		return rf(namespace, sets)
	}
	if rf, ok := ret.Get(0).(func(string, []string) uint64); ok {
		r0 = rf(namespace, sets)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(namespace, sets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockinfoGetter_GetRecordCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordCount'
type MockinfoGetter_GetRecordCount_Call struct {
	*mock.Call
}

// GetRecordCount is a helper method to define mock.On call
//   - namespace string
//   - sets []string
func (_e *MockinfoGetter_Expecter) GetRecordCount(namespace interface{}, sets interface{}) *MockinfoGetter_GetRecordCount_Call {
	return &MockinfoGetter_GetRecordCount_Call{Call: _e.mock.On("GetRecordCount", namespace, sets)}
}

func (_c *MockinfoGetter_GetRecordCount_Call) Run(run func(namespace string, sets []string)) *MockinfoGetter_GetRecordCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockinfoGetter_GetRecordCount_Call) Return(_a0 uint64, _a1 error) *MockinfoGetter_GetRecordCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockinfoGetter_GetRecordCount_Call) RunAndReturn(run func(string, []string) (uint64, error)) *MockinfoGetter_GetRecordCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: node
func (_m *MockinfoGetter) GetService(node string) (string, error) {
	ret := _m.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(node)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockinfoGetter_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockinfoGetter_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - node string
func (_e *MockinfoGetter_Expecter) GetService(node interface{}) *MockinfoGetter_GetService_Call {
	return &MockinfoGetter_GetService_Call{Call: _e.mock.On("GetService", node)}
}

func (_c *MockinfoGetter_GetService_Call) Run(run func(node string)) *MockinfoGetter_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockinfoGetter_GetService_Call) Return(_a0 string, _a1 error) *MockinfoGetter_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockinfoGetter_GetService_Call) RunAndReturn(run func(string) (string, error)) *MockinfoGetter_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockinfoGetter creates a new instance of MockinfoGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockinfoGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockinfoGetter {
	mock := &MockinfoGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
