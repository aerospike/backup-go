// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockDataProcessor creates a new instance of MockDataProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataProcessor[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataProcessor[T] {
	mock := &MockDataProcessor[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDataProcessor is an autogenerated mock type for the DataProcessor type
type MockDataProcessor[T any] struct {
	mock.Mock
}

type MockDataProcessor_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockDataProcessor[T]) EXPECT() *MockDataProcessor_Expecter[T] {
	return &MockDataProcessor_Expecter[T]{mock: &_m.Mock}
}

// Process provides a mock function for the type MockDataProcessor
func (_mock *MockDataProcessor[T]) Process(v T) (T, error) {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(T) (T, error)); ok {
		return returnFunc(v)
	}
	if returnFunc, ok := ret.Get(0).(func(T) T); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(T) error); ok {
		r1 = returnFunc(v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDataProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockDataProcessor_Process_Call[T any] struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - v
func (_e *MockDataProcessor_Expecter[T]) Process(v interface{}) *MockDataProcessor_Process_Call[T] {
	return &MockDataProcessor_Process_Call[T]{Call: _e.mock.On("Process", v)}
}

func (_c *MockDataProcessor_Process_Call[T]) Run(run func(v T)) *MockDataProcessor_Process_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockDataProcessor_Process_Call[T]) Return(v1 T, err error) *MockDataProcessor_Process_Call[T] {
	_c.Call.Return(v1, err)
	return _c
}

func (_c *MockDataProcessor_Process_Call[T]) RunAndReturn(run func(v T) (T, error)) *MockDataProcessor_Process_Call[T] {
	_c.Call.Return(run)
	return _c
}
