// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/aerospike/backup-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockwriter creates a new instance of Mockwriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockwriter[T models.TokenConstraint](t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockwriter[T] {
	mock := &Mockwriter[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Mockwriter is an autogenerated mock type for the writer type
type Mockwriter[T models.TokenConstraint] struct {
	mock.Mock
}

type Mockwriter_Expecter[T models.TokenConstraint] struct {
	mock *mock.Mock
}

func (_m *Mockwriter[T]) EXPECT() *Mockwriter_Expecter[T] {
	return &Mockwriter_Expecter[T]{mock: &_m.Mock}
}

// Close provides a mock function for the type Mockwriter
func (_mock *Mockwriter[T]) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Mockwriter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Mockwriter_Close_Call[T models.TokenConstraint] struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Mockwriter_Expecter[T]) Close() *Mockwriter_Close_Call[T] {
	return &Mockwriter_Close_Call[T]{Call: _e.mock.On("Close")}
}

func (_c *Mockwriter_Close_Call[T]) Run(run func()) *Mockwriter_Close_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockwriter_Close_Call[T]) Return(err error) *Mockwriter_Close_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *Mockwriter_Close_Call[T]) RunAndReturn(run func() error) *Mockwriter_Close_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type Mockwriter
func (_mock *Mockwriter[T]) Write(v T) (int, error) {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(T) (int, error)); ok {
		return returnFunc(v)
	}
	if returnFunc, ok := ret.Get(0).(func(T) int); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(T) error); ok {
		r1 = returnFunc(v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Mockwriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type Mockwriter_Write_Call[T models.TokenConstraint] struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - v
func (_e *Mockwriter_Expecter[T]) Write(v interface{}) *Mockwriter_Write_Call[T] {
	return &Mockwriter_Write_Call[T]{Call: _e.mock.On("Write", v)}
}

func (_c *Mockwriter_Write_Call[T]) Run(run func(v T)) *Mockwriter_Write_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *Mockwriter_Write_Call[T]) Return(n int, err error) *Mockwriter_Write_Call[T] {
	_c.Call.Return(n, err)
	return _c
}

func (_c *Mockwriter_Write_Call[T]) RunAndReturn(run func(v T) (int, error)) *Mockwriter_Write_Call[T] {
	_c.Call.Return(run)
	return _c
}
