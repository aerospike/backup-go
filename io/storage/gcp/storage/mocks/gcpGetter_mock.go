// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"

	"cloud.google.com/go/storage"
	mock "github.com/stretchr/testify/mock"
)

// NewMockgcpGetter creates a new instance of MockgcpGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockgcpGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockgcpGetter {
	mock := &MockgcpGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockgcpGetter is an autogenerated mock type for the gcpGetter type
type MockgcpGetter struct {
	mock.Mock
}

type MockgcpGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockgcpGetter) EXPECT() *MockgcpGetter_Expecter {
	return &MockgcpGetter_Expecter{mock: &_m.Mock}
}

// GetAttrs provides a mock function for the type MockgcpGetter
func (_mock *MockgcpGetter) GetAttrs(ctx context.Context, path string) (*storage.ObjectAttrs, error) {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for GetAttrs")
	}

	var r0 *storage.ObjectAttrs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*storage.ObjectAttrs, error)); ok {
		return returnFunc(ctx, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *storage.ObjectAttrs); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ObjectAttrs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockgcpGetter_GetAttrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttrs'
type MockgcpGetter_GetAttrs_Call struct {
	*mock.Call
}

// GetAttrs is a helper method to define mock.On call
//   - ctx
//   - path
func (_e *MockgcpGetter_Expecter) GetAttrs(ctx interface{}, path interface{}) *MockgcpGetter_GetAttrs_Call {
	return &MockgcpGetter_GetAttrs_Call{Call: _e.mock.On("GetAttrs", ctx, path)}
}

func (_c *MockgcpGetter_GetAttrs_Call) Run(run func(ctx context.Context, path string)) *MockgcpGetter_GetAttrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockgcpGetter_GetAttrs_Call) Return(attrs *storage.ObjectAttrs, err error) *MockgcpGetter_GetAttrs_Call {
	_c.Call.Return(attrs, err)
	return _c
}

func (_c *MockgcpGetter_GetAttrs_Call) RunAndReturn(run func(ctx context.Context, path string) (*storage.ObjectAttrs, error)) *MockgcpGetter_GetAttrs_Call {
	_c.Call.Return(run)
	return _c
}

// GetReader provides a mock function for the type MockgcpGetter
func (_mock *MockgcpGetter) GetReader(ctx context.Context, path string, generation int64, offset int64, length int64) (io.ReadCloser, error) {
	ret := _mock.Called(ctx, path, generation, offset, length)

	if len(ret) == 0 {
		panic("no return value specified for GetReader")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64, int64, int64) (io.ReadCloser, error)); ok {
		return returnFunc(ctx, path, generation, offset, length)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64, int64, int64) io.ReadCloser); ok {
		r0 = returnFunc(ctx, path, generation, offset, length)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int64, int64, int64) error); ok {
		r1 = returnFunc(ctx, path, generation, offset, length)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockgcpGetter_GetReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReader'
type MockgcpGetter_GetReader_Call struct {
	*mock.Call
}

// GetReader is a helper method to define mock.On call
//   - ctx
//   - path
//   - generation
//   - offset
//   - length
func (_e *MockgcpGetter_Expecter) GetReader(ctx interface{}, path interface{}, generation interface{}, offset interface{}, length interface{}) *MockgcpGetter_GetReader_Call {
	return &MockgcpGetter_GetReader_Call{Call: _e.mock.On("GetReader", ctx, path, generation, offset, length)}
}

func (_c *MockgcpGetter_GetReader_Call) Run(run func(ctx context.Context, path string, generation int64, offset int64, length int64)) *MockgcpGetter_GetReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *MockgcpGetter_GetReader_Call) Return(reader io.ReadCloser, err error) *MockgcpGetter_GetReader_Call {
	_c.Call.Return(reader, err)
	return _c
}

func (_c *MockgcpGetter_GetReader_Call) RunAndReturn(run func(ctx context.Context, path string, generation int64, offset int64, length int64) (io.ReadCloser, error)) *MockgcpGetter_GetReader_Call {
	_c.Call.Return(run)
	return _c
}
