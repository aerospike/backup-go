// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/aerospike/backup-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockreader creates a new instance of Mockreader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockreader[T models.TokenConstraint](t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockreader[T] {
	mock := &Mockreader[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Mockreader is an autogenerated mock type for the reader type
type Mockreader[T models.TokenConstraint] struct {
	mock.Mock
}

type Mockreader_Expecter[T models.TokenConstraint] struct {
	mock *mock.Mock
}

func (_m *Mockreader[T]) EXPECT() *Mockreader_Expecter[T] {
	return &Mockreader_Expecter[T]{mock: &_m.Mock}
}

// Close provides a mock function for the type Mockreader
func (_mock *Mockreader[T]) Close() {
	_mock.Called()
	return
}

// Mockreader_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Mockreader_Close_Call[T models.TokenConstraint] struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Mockreader_Expecter[T]) Close() *Mockreader_Close_Call[T] {
	return &Mockreader_Close_Call[T]{Call: _e.mock.On("Close")}
}

func (_c *Mockreader_Close_Call[T]) Run(run func()) *Mockreader_Close_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockreader_Close_Call[T]) Return() *Mockreader_Close_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *Mockreader_Close_Call[T]) RunAndReturn(run func()) *Mockreader_Close_Call[T] {
	_c.Run(run)
	return _c
}

// Read provides a mock function for the type Mockreader
func (_mock *Mockreader[T]) Read() (T, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (T, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Mockreader_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type Mockreader_Read_Call[T models.TokenConstraint] struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *Mockreader_Expecter[T]) Read() *Mockreader_Read_Call[T] {
	return &Mockreader_Read_Call[T]{Call: _e.mock.On("Read")}
}

func (_c *Mockreader_Read_Call[T]) Run(run func()) *Mockreader_Read_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockreader_Read_Call[T]) Return(v T, err error) *Mockreader_Read_Call[T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Mockreader_Read_Call[T]) RunAndReturn(run func() (T, error)) *Mockreader_Read_Call[T] {
	_c.Call.Return(run)
	return _c
}
