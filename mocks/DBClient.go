// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	aerospike "github.com/aerospike/aerospike-client-go/v7"

	mock "github.com/stretchr/testify/mock"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

type DBClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DBClient) EXPECT() *DBClient_Expecter {
	return &DBClient_Expecter{mock: &_m.Mock}
}

// Put provides a mock function with given fields: policy, key, bins
func (_m *DBClient) Put(policy *aerospike.WritePolicy, key *aerospike.Key, bins aerospike.BinMap) aerospike.Error {
	ret := _m.Called(policy, key, bins)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 aerospike.Error
	if rf, ok := ret.Get(0).(func(*aerospike.WritePolicy, *aerospike.Key, aerospike.BinMap) aerospike.Error); ok {
		r0 = rf(policy, key, bins)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(aerospike.Error)
		}
	}

	return r0
}

// DBClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type DBClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - policy *aerospike.WritePolicy
//   - key *aerospike.Key
//   - bins aerospike.BinMap
func (_e *DBClient_Expecter) Put(policy interface{}, key interface{}, bins interface{}) *DBClient_Put_Call {
	return &DBClient_Put_Call{Call: _e.mock.On("Put", policy, key, bins)}
}

func (_c *DBClient_Put_Call) Run(run func(policy *aerospike.WritePolicy, key *aerospike.Key, bins aerospike.BinMap)) *DBClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*aerospike.WritePolicy), args[1].(*aerospike.Key), args[2].(aerospike.BinMap))
	})
	return _c
}

func (_c *DBClient_Put_Call) Return(_a0 aerospike.Error) *DBClient_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBClient_Put_Call) RunAndReturn(run func(*aerospike.WritePolicy, *aerospike.Key, aerospike.BinMap) aerospike.Error) *DBClient_Put_Call {
	_c.Call.Return(run)
	return _c
}

// RequestInfo provides a mock function with given fields: _a0, _a1
func (_m *DBClient) RequestInfo(_a0 *aerospike.InfoPolicy, _a1 ...string) (map[string]string, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestInfo")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(*aerospike.InfoPolicy, ...string) (map[string]string, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(*aerospike.InfoPolicy, ...string) map[string]string); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*aerospike.InfoPolicy, ...string) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBClient_RequestInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestInfo'
type DBClient_RequestInfo_Call struct {
	*mock.Call
}

// RequestInfo is a helper method to define mock.On call
//   - _a0 *aerospike.InfoPolicy
//   - _a1 ...string
func (_e *DBClient_Expecter) RequestInfo(_a0 interface{}, _a1 ...interface{}) *DBClient_RequestInfo_Call {
	return &DBClient_RequestInfo_Call{Call: _e.mock.On("RequestInfo",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *DBClient_RequestInfo_Call) Run(run func(_a0 *aerospike.InfoPolicy, _a1 ...string)) *DBClient_RequestInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(*aerospike.InfoPolicy), variadicArgs...)
	})
	return _c
}

func (_c *DBClient_RequestInfo_Call) Return(_a0 map[string]string, _a1 error) *DBClient_RequestInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBClient_RequestInfo_Call) RunAndReturn(run func(*aerospike.InfoPolicy, ...string) (map[string]string, error)) *DBClient_RequestInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ScanPartitions provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *DBClient) ScanPartitions(_a0 *aerospike.ScanPolicy, _a1 *aerospike.PartitionFilter, _a2 string, _a3 string, _a4 ...string) (*aerospike.Recordset, aerospike.Error) {
	_va := make([]interface{}, len(_a4))
	for _i := range _a4 {
		_va[_i] = _a4[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2, _a3)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanPartitions")
	}

	var r0 *aerospike.Recordset
	var r1 aerospike.Error
	if rf, ok := ret.Get(0).(func(*aerospike.ScanPolicy, *aerospike.PartitionFilter, string, string, ...string) (*aerospike.Recordset, aerospike.Error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4...)
	}
	if rf, ok := ret.Get(0).(func(*aerospike.ScanPolicy, *aerospike.PartitionFilter, string, string, ...string) *aerospike.Recordset); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aerospike.Recordset)
		}
	}

	if rf, ok := ret.Get(1).(func(*aerospike.ScanPolicy, *aerospike.PartitionFilter, string, string, ...string) aerospike.Error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(aerospike.Error)
		}
	}

	return r0, r1
}

// DBClient_ScanPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanPartitions'
type DBClient_ScanPartitions_Call struct {
	*mock.Call
}

// ScanPartitions is a helper method to define mock.On call
//   - _a0 *aerospike.ScanPolicy
//   - _a1 *aerospike.PartitionFilter
//   - _a2 string
//   - _a3 string
//   - _a4 ...string
func (_e *DBClient_Expecter) ScanPartitions(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 ...interface{}) *DBClient_ScanPartitions_Call {
	return &DBClient_ScanPartitions_Call{Call: _e.mock.On("ScanPartitions",
		append([]interface{}{_a0, _a1, _a2, _a3}, _a4...)...)}
}

func (_c *DBClient_ScanPartitions_Call) Run(run func(_a0 *aerospike.ScanPolicy, _a1 *aerospike.PartitionFilter, _a2 string, _a3 string, _a4 ...string)) *DBClient_ScanPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(*aerospike.ScanPolicy), args[1].(*aerospike.PartitionFilter), args[2].(string), args[3].(string), variadicArgs...)
	})
	return _c
}

func (_c *DBClient_ScanPartitions_Call) Return(_a0 *aerospike.Recordset, _a1 aerospike.Error) *DBClient_ScanPartitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBClient_ScanPartitions_Call) RunAndReturn(run func(*aerospike.ScanPolicy, *aerospike.PartitionFilter, string, string, ...string) (*aerospike.Recordset, aerospike.Error)) *DBClient_ScanPartitions_Call {
	_c.Call.Return(run)
	return _c
}

// NewDBClient creates a new instance of DBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBClient {
	mock := &DBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
