// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "github.com/aerospike/backup-go/models"
	mock "github.com/stretchr/testify/mock"
)

// MockEncoder is an autogenerated mock type for the Encoder type
type MockEncoder[T models.TokenConstraint] struct {
	mock.Mock
}

type MockEncoder_Expecter[T models.TokenConstraint] struct {
	mock *mock.Mock
}

func (_m *MockEncoder[T]) EXPECT() *MockEncoder_Expecter[T] {
	return &MockEncoder_Expecter[T]{mock: &_m.Mock}
}

// EncodeToken provides a mock function with given fields: _a0
func (_m *MockEncoder[T]) EncodeToken(_a0 T) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EncodeToken")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(T) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(T) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(T) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncoder_EncodeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeToken'
type MockEncoder_EncodeToken_Call[T models.TokenConstraint] struct {
	*mock.Call
}

// EncodeToken is a helper method to define mock.On call
//   - _a0 T
func (_e *MockEncoder_Expecter[T]) EncodeToken(_a0 interface{}) *MockEncoder_EncodeToken_Call[T] {
	return &MockEncoder_EncodeToken_Call[T]{Call: _e.mock.On("EncodeToken", _a0)}
}

func (_c *MockEncoder_EncodeToken_Call[T]) Run(run func(_a0 T)) *MockEncoder_EncodeToken_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockEncoder_EncodeToken_Call[T]) Return(_a0 []byte, _a1 error) *MockEncoder_EncodeToken_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEncoder_EncodeToken_Call[T]) RunAndReturn(run func(T) ([]byte, error)) *MockEncoder_EncodeToken_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GenerateFilename provides a mock function with given fields: prefix, suffix
func (_m *MockEncoder[T]) GenerateFilename(prefix string, suffix string) string {
	ret := _m.Called(prefix, suffix)

	if len(ret) == 0 {
		panic("no return value specified for GenerateFilename")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(prefix, suffix)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEncoder_GenerateFilename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateFilename'
type MockEncoder_GenerateFilename_Call[T models.TokenConstraint] struct {
	*mock.Call
}

// GenerateFilename is a helper method to define mock.On call
//   - prefix string
//   - suffix string
func (_e *MockEncoder_Expecter[T]) GenerateFilename(prefix interface{}, suffix interface{}) *MockEncoder_GenerateFilename_Call[T] {
	return &MockEncoder_GenerateFilename_Call[T]{Call: _e.mock.On("GenerateFilename", prefix, suffix)}
}

func (_c *MockEncoder_GenerateFilename_Call[T]) Run(run func(prefix string, suffix string)) *MockEncoder_GenerateFilename_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEncoder_GenerateFilename_Call[T]) Return(_a0 string) *MockEncoder_GenerateFilename_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncoder_GenerateFilename_Call[T]) RunAndReturn(run func(string, string) string) *MockEncoder_GenerateFilename_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function with given fields:
func (_m *MockEncoder[T]) GetHeader() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockEncoder_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type MockEncoder_GetHeader_Call[T models.TokenConstraint] struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *MockEncoder_Expecter[T]) GetHeader() *MockEncoder_GetHeader_Call[T] {
	return &MockEncoder_GetHeader_Call[T]{Call: _e.mock.On("GetHeader")}
}

func (_c *MockEncoder_GetHeader_Call[T]) Run(run func()) *MockEncoder_GetHeader_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncoder_GetHeader_Call[T]) Return(_a0 []byte) *MockEncoder_GetHeader_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncoder_GetHeader_Call[T]) RunAndReturn(run func() []byte) *MockEncoder_GetHeader_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockEncoder creates a new instance of MockEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncoder[T models.TokenConstraint](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncoder[T] {
	mock := &MockEncoder[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
