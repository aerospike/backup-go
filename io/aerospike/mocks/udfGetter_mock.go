// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aerospike/backup-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockudfGetter creates a new instance of MockudfGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockudfGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockudfGetter {
	mock := &MockudfGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockudfGetter is an autogenerated mock type for the udfGetter type
type MockudfGetter struct {
	mock.Mock
}

type MockudfGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockudfGetter) EXPECT() *MockudfGetter_Expecter {
	return &MockudfGetter_Expecter{mock: &_m.Mock}
}

// GetUDFs provides a mock function for the type MockudfGetter
func (_mock *MockudfGetter) GetUDFs(ctx context.Context) ([]*models.UDF, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUDFs")
	}

	var r0 []*models.UDF
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*models.UDF, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*models.UDF); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UDF)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockudfGetter_GetUDFs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUDFs'
type MockudfGetter_GetUDFs_Call struct {
	*mock.Call
}

// GetUDFs is a helper method to define mock.On call
//   - ctx
func (_e *MockudfGetter_Expecter) GetUDFs(ctx interface{}) *MockudfGetter_GetUDFs_Call {
	return &MockudfGetter_GetUDFs_Call{Call: _e.mock.On("GetUDFs", ctx)}
}

func (_c *MockudfGetter_GetUDFs_Call) Run(run func(ctx context.Context)) *MockudfGetter_GetUDFs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockudfGetter_GetUDFs_Call) Return(uDFs []*models.UDF, err error) *MockudfGetter_GetUDFs_Call {
	_c.Call.Return(uDFs, err)
	return _c
}

func (_c *MockudfGetter_GetUDFs_Call) RunAndReturn(run func(ctx context.Context) ([]*models.UDF, error)) *MockudfGetter_GetUDFs_Call {
	_c.Call.Return(run)
	return _c
}
