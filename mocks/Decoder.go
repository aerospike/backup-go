// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	models "github.com/aerospike/aerospike-tools-backup-lib/models"
	mock "github.com/stretchr/testify/mock"
)

// Decoder is an autogenerated mock type for the Decoder type
type Decoder struct {
	mock.Mock
}

type Decoder_Expecter struct {
	mock *mock.Mock
}

func (_m *Decoder) EXPECT() *Decoder_Expecter {
	return &Decoder_Expecter{mock: &_m.Mock}
}

// NextToken provides a mock function with given fields:
func (_m *Decoder) NextToken() (*models.Token, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextToken")
	}

	var r0 *models.Token
	var r1 error
	if rf, ok := ret.Get(0).(func() (*models.Token, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Token)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Decoder_NextToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextToken'
type Decoder_NextToken_Call struct {
	*mock.Call
}

// NextToken is a helper method to define mock.On call
func (_e *Decoder_Expecter) NextToken() *Decoder_NextToken_Call {
	return &Decoder_NextToken_Call{Call: _e.mock.On("NextToken")}
}

func (_c *Decoder_NextToken_Call) Run(run func()) *Decoder_NextToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Decoder_NextToken_Call) Return(_a0 *models.Token, _a1 error) *Decoder_NextToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Decoder_NextToken_Call) RunAndReturn(run func() (*models.Token, error)) *Decoder_NextToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewDecoder creates a new instance of Decoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDecoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Decoder {
	mock := &Decoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
