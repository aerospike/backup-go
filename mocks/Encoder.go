// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	models "github.com/aerospike/aerospike-tools-backup-lib/models"
	mock "github.com/stretchr/testify/mock"
)

// Encoder is an autogenerated mock type for the Encoder type
type Encoder struct {
	mock.Mock
}

type Encoder_Expecter struct {
	mock *mock.Mock
}

func (_m *Encoder) EXPECT() *Encoder_Expecter {
	return &Encoder_Expecter{mock: &_m.Mock}
}

// EncodeToken provides a mock function with given fields: _a0
func (_m *Encoder) EncodeToken(_a0 *models.Token) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EncodeToken")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Token) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*models.Token) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Token) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encoder_EncodeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeToken'
type Encoder_EncodeToken_Call struct {
	*mock.Call
}

// EncodeToken is a helper method to define mock.On call
//   - _a0 *models.Token
func (_e *Encoder_Expecter) EncodeToken(_a0 interface{}) *Encoder_EncodeToken_Call {
	return &Encoder_EncodeToken_Call{Call: _e.mock.On("EncodeToken", _a0)}
}

func (_c *Encoder_EncodeToken_Call) Run(run func(_a0 *models.Token)) *Encoder_EncodeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Token))
	})
	return _c
}

func (_c *Encoder_EncodeToken_Call) Return(_a0 []byte, _a1 error) *Encoder_EncodeToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Encoder_EncodeToken_Call) RunAndReturn(run func(*models.Token) ([]byte, error)) *Encoder_EncodeToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewEncoder creates a new instance of Encoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Encoder {
	mock := &Encoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
