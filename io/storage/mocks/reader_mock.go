// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Mockreader is an autogenerated mock type for the reader type
type Mockreader struct {
	mock.Mock
}

type Mockreader_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockreader) EXPECT() *Mockreader_Expecter {
	return &Mockreader_Expecter{mock: &_m.Mock}
}

// ListObjects provides a mock function with given fields: ctx, path
func (_m *Mockreader) ListObjects(ctx context.Context, path string) ([]string, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockreader_ListObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjects'
type Mockreader_ListObjects_Call struct {
	*mock.Call
}

// ListObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *Mockreader_Expecter) ListObjects(ctx interface{}, path interface{}) *Mockreader_ListObjects_Call {
	return &Mockreader_ListObjects_Call{Call: _e.mock.On("ListObjects", ctx, path)}
}

func (_c *Mockreader_ListObjects_Call) Run(run func(ctx context.Context, path string)) *Mockreader_ListObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Mockreader_ListObjects_Call) Return(_a0 []string, _a1 error) *Mockreader_ListObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockreader_ListObjects_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *Mockreader_ListObjects_Call {
	_c.Call.Return(run)
	return _c
}

// SetObjectsToStream provides a mock function with given fields: list
func (_m *Mockreader) SetObjectsToStream(list []string) {
	_m.Called(list)
}

// Mockreader_SetObjectsToStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetObjectsToStream'
type Mockreader_SetObjectsToStream_Call struct {
	*mock.Call
}

// SetObjectsToStream is a helper method to define mock.On call
//   - list []string
func (_e *Mockreader_Expecter) SetObjectsToStream(list interface{}) *Mockreader_SetObjectsToStream_Call {
	return &Mockreader_SetObjectsToStream_Call{Call: _e.mock.On("SetObjectsToStream", list)}
}

func (_c *Mockreader_SetObjectsToStream_Call) Run(run func(list []string)) *Mockreader_SetObjectsToStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Mockreader_SetObjectsToStream_Call) Return() *Mockreader_SetObjectsToStream_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mockreader_SetObjectsToStream_Call) RunAndReturn(run func([]string)) *Mockreader_SetObjectsToStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockreader creates a new instance of Mockreader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockreader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockreader {
	mock := &Mockreader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
