// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Azure/azure-sdk-for-go/sdk/storage/azblob"
	"github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/blob"
	mock "github.com/stretchr/testify/mock"
)

// NewMockazblobGetter creates a new instance of MockazblobGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockazblobGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockazblobGetter {
	mock := &MockazblobGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockazblobGetter is an autogenerated mock type for the azblobGetter type
type MockazblobGetter struct {
	mock.Mock
}

type MockazblobGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockazblobGetter) EXPECT() *MockazblobGetter_Expecter {
	return &MockazblobGetter_Expecter{mock: &_m.Mock}
}

// DownloadStream provides a mock function for the type MockazblobGetter
func (_mock *MockazblobGetter) DownloadStream(ctx context.Context, container string, path string, options *blob.DownloadStreamOptions) (azblob.DownloadStreamResponse, error) {
	ret := _mock.Called(ctx, container, path, options)

	if len(ret) == 0 {
		panic("no return value specified for DownloadStream")
	}

	var r0 azblob.DownloadStreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *blob.DownloadStreamOptions) (azblob.DownloadStreamResponse, error)); ok {
		return returnFunc(ctx, container, path, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *blob.DownloadStreamOptions) azblob.DownloadStreamResponse); ok {
		r0 = returnFunc(ctx, container, path, options)
	} else {
		r0 = ret.Get(0).(azblob.DownloadStreamResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *blob.DownloadStreamOptions) error); ok {
		r1 = returnFunc(ctx, container, path, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockazblobGetter_DownloadStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadStream'
type MockazblobGetter_DownloadStream_Call struct {
	*mock.Call
}

// DownloadStream is a helper method to define mock.On call
//   - ctx
//   - container
//   - path
//   - options
func (_e *MockazblobGetter_Expecter) DownloadStream(ctx interface{}, container interface{}, path interface{}, options interface{}) *MockazblobGetter_DownloadStream_Call {
	return &MockazblobGetter_DownloadStream_Call{Call: _e.mock.On("DownloadStream", ctx, container, path, options)}
}

func (_c *MockazblobGetter_DownloadStream_Call) Run(run func(ctx context.Context, container string, path string, options *blob.DownloadStreamOptions)) *MockazblobGetter_DownloadStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*blob.DownloadStreamOptions))
	})
	return _c
}

func (_c *MockazblobGetter_DownloadStream_Call) Return(v azblob.DownloadStreamResponse, err error) *MockazblobGetter_DownloadStream_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockazblobGetter_DownloadStream_Call) RunAndReturn(run func(ctx context.Context, container string, path string, options *blob.DownloadStreamOptions) (azblob.DownloadStreamResponse, error)) *MockazblobGetter_DownloadStream_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlobProperties provides a mock function for the type MockazblobGetter
func (_mock *MockazblobGetter) GetBlobProperties(ctx context.Context, container string, path string) (blob.GetPropertiesResponse, error) {
	ret := _mock.Called(ctx, container, path)

	if len(ret) == 0 {
		panic("no return value specified for GetBlobProperties")
	}

	var r0 blob.GetPropertiesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (blob.GetPropertiesResponse, error)); ok {
		return returnFunc(ctx, container, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) blob.GetPropertiesResponse); ok {
		r0 = returnFunc(ctx, container, path)
	} else {
		r0 = ret.Get(0).(blob.GetPropertiesResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, container, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockazblobGetter_GetBlobProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobProperties'
type MockazblobGetter_GetBlobProperties_Call struct {
	*mock.Call
}

// GetBlobProperties is a helper method to define mock.On call
//   - ctx
//   - container
//   - path
func (_e *MockazblobGetter_Expecter) GetBlobProperties(ctx interface{}, container interface{}, path interface{}) *MockazblobGetter_GetBlobProperties_Call {
	return &MockazblobGetter_GetBlobProperties_Call{Call: _e.mock.On("GetBlobProperties", ctx, container, path)}
}

func (_c *MockazblobGetter_GetBlobProperties_Call) Run(run func(ctx context.Context, container string, path string)) *MockazblobGetter_GetBlobProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockazblobGetter_GetBlobProperties_Call) Return(v blob.GetPropertiesResponse, err error) *MockazblobGetter_GetBlobProperties_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockazblobGetter_GetBlobProperties_Call) RunAndReturn(run func(ctx context.Context, container string, path string) (blob.GetPropertiesResponse, error)) *MockazblobGetter_GetBlobProperties_Call {
	_c.Call.Return(run)
	return _c
}
