// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	aerospike "github.com/aerospike/aerospike-client-go/v7"

	mock "github.com/stretchr/testify/mock"
)

// DBWriter is an autogenerated mock type for the DBWriter type
type DBWriter struct {
	mock.Mock
}

type DBWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *DBWriter) EXPECT() *DBWriter_Expecter {
	return &DBWriter_Expecter{mock: &_m.Mock}
}

// Put provides a mock function with given fields: policy, key, bins
func (_m *DBWriter) Put(policy *aerospike.WritePolicy, key *aerospike.Key, bins aerospike.BinMap) aerospike.Error {
	ret := _m.Called(policy, key, bins)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 aerospike.Error
	if rf, ok := ret.Get(0).(func(*aerospike.WritePolicy, *aerospike.Key, aerospike.BinMap) aerospike.Error); ok {
		r0 = rf(policy, key, bins)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(aerospike.Error)
		}
	}

	return r0
}

// DBWriter_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type DBWriter_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - policy *aerospike.WritePolicy
//   - key *aerospike.Key
//   - bins aerospike.BinMap
func (_e *DBWriter_Expecter) Put(policy interface{}, key interface{}, bins interface{}) *DBWriter_Put_Call {
	return &DBWriter_Put_Call{Call: _e.mock.On("Put", policy, key, bins)}
}

func (_c *DBWriter_Put_Call) Run(run func(policy *aerospike.WritePolicy, key *aerospike.Key, bins aerospike.BinMap)) *DBWriter_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*aerospike.WritePolicy), args[1].(*aerospike.Key), args[2].(aerospike.BinMap))
	})
	return _c
}

func (_c *DBWriter_Put_Call) Return(_a0 aerospike.Error) *DBWriter_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBWriter_Put_Call) RunAndReturn(run func(*aerospike.WritePolicy, *aerospike.Key, aerospike.BinMap) aerospike.Error) *DBWriter_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewDBWriter creates a new instance of DBWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBWriter {
	mock := &DBWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
