// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/aerospike/aerospike-client-go/v8"
	mock "github.com/stretchr/testify/mock"
)

// NewMocknodeGetter creates a new instance of MocknodeGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocknodeGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocknodeGetter {
	mock := &MocknodeGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MocknodeGetter is an autogenerated mock type for the nodeGetter type
type MocknodeGetter struct {
	mock.Mock
}

type MocknodeGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MocknodeGetter) EXPECT() *MocknodeGetter_Expecter {
	return &MocknodeGetter_Expecter{mock: &_m.Mock}
}

// GetNodeByName provides a mock function for the type MocknodeGetter
func (_mock *MocknodeGetter) GetNodeByName(name string) (*aerospike.Node, aerospike.Error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeByName")
	}

	var r0 *aerospike.Node
	var r1 aerospike.Error
	if returnFunc, ok := ret.Get(0).(func(string) (*aerospike.Node, aerospike.Error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *aerospike.Node); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aerospike.Node)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) aerospike.Error); ok {
		r1 = returnFunc(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(aerospike.Error)
		}
	}
	return r0, r1
}

// MocknodeGetter_GetNodeByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeByName'
type MocknodeGetter_GetNodeByName_Call struct {
	*mock.Call
}

// GetNodeByName is a helper method to define mock.On call
//   - name
func (_e *MocknodeGetter_Expecter) GetNodeByName(name interface{}) *MocknodeGetter_GetNodeByName_Call {
	return &MocknodeGetter_GetNodeByName_Call{Call: _e.mock.On("GetNodeByName", name)}
}

func (_c *MocknodeGetter_GetNodeByName_Call) Run(run func(name string)) *MocknodeGetter_GetNodeByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MocknodeGetter_GetNodeByName_Call) Return(node *aerospike.Node, error aerospike.Error) *MocknodeGetter_GetNodeByName_Call {
	_c.Call.Return(node, error)
	return _c
}

func (_c *MocknodeGetter_GetNodeByName_Call) RunAndReturn(run func(name string) (*aerospike.Node, aerospike.Error)) *MocknodeGetter_GetNodeByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodes provides a mock function for the type MocknodeGetter
func (_mock *MocknodeGetter) GetNodes() []*aerospike.Node {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodes")
	}

	var r0 []*aerospike.Node
	if returnFunc, ok := ret.Get(0).(func() []*aerospike.Node); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aerospike.Node)
		}
	}
	return r0
}

// MocknodeGetter_GetNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodes'
type MocknodeGetter_GetNodes_Call struct {
	*mock.Call
}

// GetNodes is a helper method to define mock.On call
func (_e *MocknodeGetter_Expecter) GetNodes() *MocknodeGetter_GetNodes_Call {
	return &MocknodeGetter_GetNodes_Call{Call: _e.mock.On("GetNodes")}
}

func (_c *MocknodeGetter_GetNodes_Call) Run(run func()) *MocknodeGetter_GetNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocknodeGetter_GetNodes_Call) Return(nodes []*aerospike.Node) *MocknodeGetter_GetNodes_Call {
	_c.Call.Return(nodes)
	return _c
}

func (_c *MocknodeGetter_GetNodes_Call) RunAndReturn(run func() []*aerospike.Node) *MocknodeGetter_GetNodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandomNode provides a mock function for the type MocknodeGetter
func (_mock *MocknodeGetter) GetRandomNode() (*aerospike.Node, aerospike.Error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRandomNode")
	}

	var r0 *aerospike.Node
	var r1 aerospike.Error
	if returnFunc, ok := ret.Get(0).(func() (*aerospike.Node, aerospike.Error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *aerospike.Node); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aerospike.Node)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() aerospike.Error); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(aerospike.Error)
		}
	}
	return r0, r1
}

// MocknodeGetter_GetRandomNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomNode'
type MocknodeGetter_GetRandomNode_Call struct {
	*mock.Call
}

// GetRandomNode is a helper method to define mock.On call
func (_e *MocknodeGetter_Expecter) GetRandomNode() *MocknodeGetter_GetRandomNode_Call {
	return &MocknodeGetter_GetRandomNode_Call{Call: _e.mock.On("GetRandomNode")}
}

func (_c *MocknodeGetter_GetRandomNode_Call) Run(run func()) *MocknodeGetter_GetRandomNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocknodeGetter_GetRandomNode_Call) Return(node *aerospike.Node, error aerospike.Error) *MocknodeGetter_GetRandomNode_Call {
	_c.Call.Return(node, error)
	return _c
}

func (_c *MocknodeGetter_GetRandomNode_Call) RunAndReturn(run func() (*aerospike.Node, aerospike.Error)) *MocknodeGetter_GetRandomNode_Call {
	_c.Call.Return(run)
	return _c
}
