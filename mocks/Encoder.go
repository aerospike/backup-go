// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	aerospike "github.com/aerospike/aerospike-client-go/v7"

	mock "github.com/stretchr/testify/mock"

	models "github.com/aerospike/aerospike-tools-backup-lib/models"
)

// Encoder is an autogenerated mock type for the Encoder type
type Encoder struct {
	mock.Mock
}

type Encoder_Expecter struct {
	mock *mock.Mock
}

func (_m *Encoder) EXPECT() *Encoder_Expecter {
	return &Encoder_Expecter{mock: &_m.Mock}
}

// EncodeRecord provides a mock function with given fields: v
func (_m *Encoder) EncodeRecord(v *aerospike.Record) ([]byte, error) {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for EncodeRecord")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*aerospike.Record) ([]byte, error)); ok {
		return rf(v)
	}
	if rf, ok := ret.Get(0).(func(*aerospike.Record) []byte); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*aerospike.Record) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encoder_EncodeRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeRecord'
type Encoder_EncodeRecord_Call struct {
	*mock.Call
}

// EncodeRecord is a helper method to define mock.On call
//   - v *aerospike.Record
func (_e *Encoder_Expecter) EncodeRecord(v interface{}) *Encoder_EncodeRecord_Call {
	return &Encoder_EncodeRecord_Call{Call: _e.mock.On("EncodeRecord", v)}
}

func (_c *Encoder_EncodeRecord_Call) Run(run func(v *aerospike.Record)) *Encoder_EncodeRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*aerospike.Record))
	})
	return _c
}

func (_c *Encoder_EncodeRecord_Call) Return(_a0 []byte, _a1 error) *Encoder_EncodeRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Encoder_EncodeRecord_Call) RunAndReturn(run func(*aerospike.Record) ([]byte, error)) *Encoder_EncodeRecord_Call {
	_c.Call.Return(run)
	return _c
}

// EncodeSIndex provides a mock function with given fields: v
func (_m *Encoder) EncodeSIndex(v *models.SIndex) ([]byte, error) {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for EncodeSIndex")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.SIndex) ([]byte, error)); ok {
		return rf(v)
	}
	if rf, ok := ret.Get(0).(func(*models.SIndex) []byte); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SIndex) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encoder_EncodeSIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeSIndex'
type Encoder_EncodeSIndex_Call struct {
	*mock.Call
}

// EncodeSIndex is a helper method to define mock.On call
//   - v *models.SIndex
func (_e *Encoder_Expecter) EncodeSIndex(v interface{}) *Encoder_EncodeSIndex_Call {
	return &Encoder_EncodeSIndex_Call{Call: _e.mock.On("EncodeSIndex", v)}
}

func (_c *Encoder_EncodeSIndex_Call) Run(run func(v *models.SIndex)) *Encoder_EncodeSIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.SIndex))
	})
	return _c
}

func (_c *Encoder_EncodeSIndex_Call) Return(_a0 []byte, _a1 error) *Encoder_EncodeSIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Encoder_EncodeSIndex_Call) RunAndReturn(run func(*models.SIndex) ([]byte, error)) *Encoder_EncodeSIndex_Call {
	_c.Call.Return(run)
	return _c
}

// EncodeUDF provides a mock function with given fields: v
func (_m *Encoder) EncodeUDF(v *models.UDF) ([]byte, error) {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for EncodeUDF")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.UDF) ([]byte, error)); ok {
		return rf(v)
	}
	if rf, ok := ret.Get(0).(func(*models.UDF) []byte); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.UDF) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encoder_EncodeUDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeUDF'
type Encoder_EncodeUDF_Call struct {
	*mock.Call
}

// EncodeUDF is a helper method to define mock.On call
//   - v *models.UDF
func (_e *Encoder_Expecter) EncodeUDF(v interface{}) *Encoder_EncodeUDF_Call {
	return &Encoder_EncodeUDF_Call{Call: _e.mock.On("EncodeUDF", v)}
}

func (_c *Encoder_EncodeUDF_Call) Run(run func(v *models.UDF)) *Encoder_EncodeUDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.UDF))
	})
	return _c
}

func (_c *Encoder_EncodeUDF_Call) Return(_a0 []byte, _a1 error) *Encoder_EncodeUDF_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Encoder_EncodeUDF_Call) RunAndReturn(run func(*models.UDF) ([]byte, error)) *Encoder_EncodeUDF_Call {
	_c.Call.Return(run)
	return _c
}

// NewEncoder creates a new instance of Encoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Encoder {
	mock := &Encoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
