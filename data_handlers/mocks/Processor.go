// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Processor is an autogenerated mock type for the Processor type
type Processor[T interface{}] struct {
	mock.Mock
}

type Processor_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Processor[T]) EXPECT() *Processor_Expecter[T] {
	return &Processor_Expecter[T]{mock: &_m.Mock}
}

// Process provides a mock function with given fields: _a0
func (_m *Processor[T]) Process(_a0 T) (T, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(T) (T, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(T) T); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(T) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Processor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type Processor_Process_Call[T interface{}] struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - _a0 T
func (_e *Processor_Expecter[T]) Process(_a0 interface{}) *Processor_Process_Call[T] {
	return &Processor_Process_Call[T]{Call: _e.mock.On("Process", _a0)}
}

func (_c *Processor_Process_Call[T]) Run(run func(_a0 T)) *Processor_Process_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *Processor_Process_Call[T]) Return(_a0 T, _a1 error) *Processor_Process_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Processor_Process_Call[T]) RunAndReturn(run func(T) (T, error)) *Processor_Process_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewProcessor creates a new instance of Processor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessor[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Processor[T] {
	mock := &Processor[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
