// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockDataWriter is an autogenerated mock type for the DataWriter type
type MockDataWriter[T interface{}] struct {
	mock.Mock
}

type MockDataWriter_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockDataWriter[T]) EXPECT() *MockDataWriter_Expecter[T] {
	return &MockDataWriter_Expecter[T]{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockDataWriter[T]) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataWriter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDataWriter_Close_Call[T interface{}] struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDataWriter_Expecter[T]) Close() *MockDataWriter_Close_Call[T] {
	return &MockDataWriter_Close_Call[T]{Call: _e.mock.On("Close")}
}

func (_c *MockDataWriter_Close_Call[T]) Run(run func()) *MockDataWriter_Close_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataWriter_Close_Call[T]) Return(err error) *MockDataWriter_Close_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDataWriter_Close_Call[T]) RunAndReturn(run func() error) *MockDataWriter_Close_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: _a0
func (_m *MockDataWriter[T]) Write(_a0 T) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(T) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(T) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(T) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockDataWriter_Write_Call[T interface{}] struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - _a0 T
func (_e *MockDataWriter_Expecter[T]) Write(_a0 interface{}) *MockDataWriter_Write_Call[T] {
	return &MockDataWriter_Write_Call[T]{Call: _e.mock.On("Write", _a0)}
}

func (_c *MockDataWriter_Write_Call[T]) Run(run func(_a0 T)) *MockDataWriter_Write_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockDataWriter_Write_Call[T]) Return(n int, err error) *MockDataWriter_Write_Call[T] {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDataWriter_Write_Call[T]) RunAndReturn(run func(T) (int, error)) *MockDataWriter_Write_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockDataWriter creates a new instance of MockDataWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataWriter[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataWriter[T] {
	mock := &MockDataWriter[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
