// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockStreamingReader is an autogenerated mock type for the StreamingReader type
type MockStreamingReader struct {
	mock.Mock
}

type MockStreamingReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStreamingReader) EXPECT() *MockStreamingReader_Expecter {
	return &MockStreamingReader_Expecter{mock: &_m.Mock}
}

// GetType provides a mock function with given fields:
func (_m *MockStreamingReader) GetType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStreamingReader_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type MockStreamingReader_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *MockStreamingReader_Expecter) GetType() *MockStreamingReader_GetType_Call {
	return &MockStreamingReader_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *MockStreamingReader_GetType_Call) Run(run func()) *MockStreamingReader_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStreamingReader_GetType_Call) Return(_a0 string) *MockStreamingReader_GetType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStreamingReader_GetType_Call) RunAndReturn(run func() string) *MockStreamingReader_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// OpenFile provides a mock function with given fields: ctx, filename, readersCh, errorsCh
func (_m *MockStreamingReader) OpenFile(ctx context.Context, filename string, readersCh chan<- io.ReadCloser, errorsCh chan<- error) {
	_m.Called(ctx, filename, readersCh, errorsCh)
}

// MockStreamingReader_OpenFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenFile'
type MockStreamingReader_OpenFile_Call struct {
	*mock.Call
}

// OpenFile is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
//   - readersCh chan<- io.ReadCloser
//   - errorsCh chan<- error
func (_e *MockStreamingReader_Expecter) OpenFile(ctx interface{}, filename interface{}, readersCh interface{}, errorsCh interface{}) *MockStreamingReader_OpenFile_Call {
	return &MockStreamingReader_OpenFile_Call{Call: _e.mock.On("OpenFile", ctx, filename, readersCh, errorsCh)}
}

func (_c *MockStreamingReader_OpenFile_Call) Run(run func(ctx context.Context, filename string, readersCh chan<- io.ReadCloser, errorsCh chan<- error)) *MockStreamingReader_OpenFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(chan<- io.ReadCloser), args[3].(chan<- error))
	})
	return _c
}

func (_c *MockStreamingReader_OpenFile_Call) Return() *MockStreamingReader_OpenFile_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStreamingReader_OpenFile_Call) RunAndReturn(run func(context.Context, string, chan<- io.ReadCloser, chan<- error)) *MockStreamingReader_OpenFile_Call {
	_c.Call.Return(run)
	return _c
}

// StreamFiles provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStreamingReader) StreamFiles(_a0 context.Context, _a1 chan<- io.ReadCloser, _a2 chan<- error) {
	_m.Called(_a0, _a1, _a2)
}

// MockStreamingReader_StreamFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamFiles'
type MockStreamingReader_StreamFiles_Call struct {
	*mock.Call
}

// StreamFiles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 chan<- io.ReadCloser
//   - _a2 chan<- error
func (_e *MockStreamingReader_Expecter) StreamFiles(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockStreamingReader_StreamFiles_Call {
	return &MockStreamingReader_StreamFiles_Call{Call: _e.mock.On("StreamFiles", _a0, _a1, _a2)}
}

func (_c *MockStreamingReader_StreamFiles_Call) Run(run func(_a0 context.Context, _a1 chan<- io.ReadCloser, _a2 chan<- error)) *MockStreamingReader_StreamFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- io.ReadCloser), args[2].(chan<- error))
	})
	return _c
}

func (_c *MockStreamingReader_StreamFiles_Call) Return() *MockStreamingReader_StreamFiles_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStreamingReader_StreamFiles_Call) RunAndReturn(run func(context.Context, chan<- io.ReadCloser, chan<- error)) *MockStreamingReader_StreamFiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStreamingReader creates a new instance of MockStreamingReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStreamingReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStreamingReader {
	mock := &MockStreamingReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
