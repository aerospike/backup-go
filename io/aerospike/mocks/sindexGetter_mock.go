// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aerospike/backup-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMocksindexGetter creates a new instance of MocksindexGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksindexGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocksindexGetter {
	mock := &MocksindexGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MocksindexGetter is an autogenerated mock type for the sindexGetter type
type MocksindexGetter struct {
	mock.Mock
}

type MocksindexGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MocksindexGetter) EXPECT() *MocksindexGetter_Expecter {
	return &MocksindexGetter_Expecter{mock: &_m.Mock}
}

// GetSIndexes provides a mock function for the type MocksindexGetter
func (_mock *MocksindexGetter) GetSIndexes(ctx context.Context, namespace string) ([]*models.SIndex, error) {
	ret := _mock.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetSIndexes")
	}

	var r0 []*models.SIndex
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*models.SIndex, error)); ok {
		return returnFunc(ctx, namespace)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*models.SIndex); ok {
		r0 = returnFunc(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SIndex)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocksindexGetter_GetSIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSIndexes'
type MocksindexGetter_GetSIndexes_Call struct {
	*mock.Call
}

// GetSIndexes is a helper method to define mock.On call
//   - ctx
//   - namespace
func (_e *MocksindexGetter_Expecter) GetSIndexes(ctx interface{}, namespace interface{}) *MocksindexGetter_GetSIndexes_Call {
	return &MocksindexGetter_GetSIndexes_Call{Call: _e.mock.On("GetSIndexes", ctx, namespace)}
}

func (_c *MocksindexGetter_GetSIndexes_Call) Run(run func(ctx context.Context, namespace string)) *MocksindexGetter_GetSIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MocksindexGetter_GetSIndexes_Call) Return(sIndexs []*models.SIndex, err error) *MocksindexGetter_GetSIndexes_Call {
	_c.Call.Return(sIndexs, err)
	return _c
}

func (_c *MocksindexGetter_GetSIndexes_Call) RunAndReturn(run func(ctx context.Context, namespace string) ([]*models.SIndex, error)) *MocksindexGetter_GetSIndexes_Call {
	_c.Call.Return(run)
	return _c
}
