// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

type Reader_Expecter struct {
	mock *mock.Mock
}

func (_m *Reader) EXPECT() *Reader_Expecter {
	return &Reader_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields:
func (_m *Reader) Cancel() {
	_m.Called()
}

// Reader_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type Reader_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
func (_e *Reader_Expecter) Cancel() *Reader_Cancel_Call {
	return &Reader_Cancel_Call{Call: _e.mock.On("Cancel")}
}

func (_c *Reader_Cancel_Call) Run(run func()) *Reader_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Reader_Cancel_Call) Return() *Reader_Cancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *Reader_Cancel_Call) RunAndReturn(run func()) *Reader_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields:
func (_m *Reader) Read() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reader_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type Reader_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *Reader_Expecter) Read() *Reader_Read_Call {
	return &Reader_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *Reader_Read_Call) Run(run func()) *Reader_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Reader_Read_Call) Return(_a0 interface{}, _a1 error) *Reader_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Reader_Read_Call) RunAndReturn(run func() (interface{}, error)) *Reader_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
