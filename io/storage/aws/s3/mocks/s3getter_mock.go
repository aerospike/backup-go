// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/s3"
	mock "github.com/stretchr/testify/mock"
)

// NewMocks3Getter creates a new instance of Mocks3Getter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocks3Getter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mocks3Getter {
	mock := &Mocks3Getter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Mocks3Getter is an autogenerated mock type for the s3Getter type
type Mocks3Getter struct {
	mock.Mock
}

type Mocks3Getter_Expecter struct {
	mock *mock.Mock
}

func (_m *Mocks3Getter) EXPECT() *Mocks3Getter_Expecter {
	return &Mocks3Getter_Expecter{mock: &_m.Mock}
}

// GetObject provides a mock function for the type Mocks3Getter
func (_mock *Mocks3Getter) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *s3.GetObjectOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) (*s3.GetObjectOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) *s3.GetObjectOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetObjectOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Mocks3Getter_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type Mocks3Getter_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *Mocks3Getter_Expecter) GetObject(ctx interface{}, params interface{}, optFns ...interface{}) *Mocks3Getter_GetObject_Call {
	return &Mocks3Getter_GetObject_Call{Call: _e.mock.On("GetObject",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Mocks3Getter_GetObject_Call) Run(run func(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options))) *Mocks3Getter_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*s3.Options))
		run(args[0].(context.Context), args[1].(*s3.GetObjectInput), variadicArgs...)
	})
	return _c
}

func (_c *Mocks3Getter_GetObject_Call) Return(getObjectOutput *s3.GetObjectOutput, err error) *Mocks3Getter_GetObject_Call {
	_c.Call.Return(getObjectOutput, err)
	return _c
}

func (_c *Mocks3Getter_GetObject_Call) RunAndReturn(run func(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error)) *Mocks3Getter_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// HeadObject provides a mock function for the type Mocks3Getter
func (_mock *Mocks3Getter) HeadObject(ctx context.Context, params *s3.HeadObjectInput, optFns ...func(*s3.Options)) (*s3.HeadObjectOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for HeadObject")
	}

	var r0 *s3.HeadObjectOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.HeadObjectInput, ...func(*s3.Options)) (*s3.HeadObjectOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.HeadObjectInput, ...func(*s3.Options)) *s3.HeadObjectOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.HeadObjectOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.HeadObjectInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Mocks3Getter_HeadObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadObject'
type Mocks3Getter_HeadObject_Call struct {
	*mock.Call
}

// HeadObject is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *Mocks3Getter_Expecter) HeadObject(ctx interface{}, params interface{}, optFns ...interface{}) *Mocks3Getter_HeadObject_Call {
	return &Mocks3Getter_HeadObject_Call{Call: _e.mock.On("HeadObject",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *Mocks3Getter_HeadObject_Call) Run(run func(ctx context.Context, params *s3.HeadObjectInput, optFns ...func(*s3.Options))) *Mocks3Getter_HeadObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*s3.Options))
		run(args[0].(context.Context), args[1].(*s3.HeadObjectInput), variadicArgs...)
	})
	return _c
}

func (_c *Mocks3Getter_HeadObject_Call) Return(headObjectOutput *s3.HeadObjectOutput, err error) *Mocks3Getter_HeadObject_Call {
	_c.Call.Return(headObjectOutput, err)
	return _c
}

func (_c *Mocks3Getter_HeadObject_Call) RunAndReturn(run func(ctx context.Context, params *s3.HeadObjectInput, optFns ...func(*s3.Options)) (*s3.HeadObjectOutput, error)) *Mocks3Getter_HeadObject_Call {
	_c.Call.Return(run)
	return _c
}
