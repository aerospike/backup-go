// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/aerospike/aerospike-client-go/v8"
	mock "github.com/stretchr/testify/mock"
)

// NewMockinfoGetter creates a new instance of MockinfoGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockinfoGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockinfoGetter {
	mock := &MockinfoGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockinfoGetter is an autogenerated mock type for the infoGetter type
type MockinfoGetter struct {
	mock.Mock
}

type MockinfoGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockinfoGetter) EXPECT() *MockinfoGetter_Expecter {
	return &MockinfoGetter_Expecter{mock: &_m.Mock}
}

// RequestInfo provides a mock function for the type MockinfoGetter
func (_mock *MockinfoGetter) RequestInfo(infoPolicy *aerospike.InfoPolicy, commands ...string) (map[string]string, aerospike.Error) {
	var tmpRet mock.Arguments
	if len(commands) > 0 {
		tmpRet = _mock.Called(infoPolicy, commands)
	} else {
		tmpRet = _mock.Called(infoPolicy)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RequestInfo")
	}

	var r0 map[string]string
	var r1 aerospike.Error
	if returnFunc, ok := ret.Get(0).(func(*aerospike.InfoPolicy, ...string) (map[string]string, aerospike.Error)); ok {
		return returnFunc(infoPolicy, commands...)
	}
	if returnFunc, ok := ret.Get(0).(func(*aerospike.InfoPolicy, ...string) map[string]string); ok {
		r0 = returnFunc(infoPolicy, commands...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*aerospike.InfoPolicy, ...string) aerospike.Error); ok {
		r1 = returnFunc(infoPolicy, commands...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(aerospike.Error)
		}
	}
	return r0, r1
}

// MockinfoGetter_RequestInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestInfo'
type MockinfoGetter_RequestInfo_Call struct {
	*mock.Call
}

// RequestInfo is a helper method to define mock.On call
//   - infoPolicy
//   - commands
func (_e *MockinfoGetter_Expecter) RequestInfo(infoPolicy interface{}, commands ...interface{}) *MockinfoGetter_RequestInfo_Call {
	return &MockinfoGetter_RequestInfo_Call{Call: _e.mock.On("RequestInfo",
		append([]interface{}{infoPolicy}, commands...)...)}
}

func (_c *MockinfoGetter_RequestInfo_Call) Run(run func(infoPolicy *aerospike.InfoPolicy, commands ...string)) *MockinfoGetter_RequestInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]string)
		run(args[0].(*aerospike.InfoPolicy), variadicArgs...)
	})
	return _c
}

func (_c *MockinfoGetter_RequestInfo_Call) Return(stringToString map[string]string, error aerospike.Error) *MockinfoGetter_RequestInfo_Call {
	_c.Call.Return(stringToString, error)
	return _c
}

func (_c *MockinfoGetter_RequestInfo_Call) RunAndReturn(run func(infoPolicy *aerospike.InfoPolicy, commands ...string) (map[string]string, aerospike.Error)) *MockinfoGetter_RequestInfo_Call {
	_c.Call.Return(run)
	return _c
}
