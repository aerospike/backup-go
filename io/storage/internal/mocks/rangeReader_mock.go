// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockrangeReader creates a new instance of MockrangeReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockrangeReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockrangeReader {
	mock := &MockrangeReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockrangeReader is an autogenerated mock type for the rangeReader type
type MockrangeReader struct {
	mock.Mock
}

type MockrangeReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockrangeReader) EXPECT() *MockrangeReader_Expecter {
	return &MockrangeReader_Expecter{mock: &_m.Mock}
}

// GetInfo provides a mock function for the type MockrangeReader
func (_mock *MockrangeReader) GetInfo() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInfo")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockrangeReader_GetInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInfo'
type MockrangeReader_GetInfo_Call struct {
	*mock.Call
}

// GetInfo is a helper method to define mock.On call
func (_e *MockrangeReader_Expecter) GetInfo() *MockrangeReader_GetInfo_Call {
	return &MockrangeReader_GetInfo_Call{Call: _e.mock.On("GetInfo")}
}

func (_c *MockrangeReader_GetInfo_Call) Run(run func()) *MockrangeReader_GetInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockrangeReader_GetInfo_Call) Return(s string) *MockrangeReader_GetInfo_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockrangeReader_GetInfo_Call) RunAndReturn(run func() string) *MockrangeReader_GetInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetSize provides a mock function for the type MockrangeReader
func (_mock *MockrangeReader) GetSize() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSize")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockrangeReader_GetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSize'
type MockrangeReader_GetSize_Call struct {
	*mock.Call
}

// GetSize is a helper method to define mock.On call
func (_e *MockrangeReader_Expecter) GetSize() *MockrangeReader_GetSize_Call {
	return &MockrangeReader_GetSize_Call{Call: _e.mock.On("GetSize")}
}

func (_c *MockrangeReader_GetSize_Call) Run(run func()) *MockrangeReader_GetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockrangeReader_GetSize_Call) Return(n int64) *MockrangeReader_GetSize_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockrangeReader_GetSize_Call) RunAndReturn(run func() int64) *MockrangeReader_GetSize_Call {
	_c.Call.Return(run)
	return _c
}

// OpenRange provides a mock function for the type MockrangeReader
func (_mock *MockrangeReader) OpenRange(ctx context.Context, rangeHeader *string) (io.ReadCloser, error) {
	ret := _mock.Called(ctx, rangeHeader)

	if len(ret) == 0 {
		panic("no return value specified for OpenRange")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string) (io.ReadCloser, error)); ok {
		return returnFunc(ctx, rangeHeader)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string) io.ReadCloser); ok {
		r0 = returnFunc(ctx, rangeHeader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = returnFunc(ctx, rangeHeader)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockrangeReader_OpenRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenRange'
type MockrangeReader_OpenRange_Call struct {
	*mock.Call
}

// OpenRange is a helper method to define mock.On call
//   - ctx
//   - rangeHeader
func (_e *MockrangeReader_Expecter) OpenRange(ctx interface{}, rangeHeader interface{}) *MockrangeReader_OpenRange_Call {
	return &MockrangeReader_OpenRange_Call{Call: _e.mock.On("OpenRange", ctx, rangeHeader)}
}

func (_c *MockrangeReader_OpenRange_Call) Run(run func(ctx context.Context, rangeHeader *string)) *MockrangeReader_OpenRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string))
	})
	return _c
}

func (_c *MockrangeReader_OpenRange_Call) Return(readCloser io.ReadCloser, err error) *MockrangeReader_OpenRange_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockrangeReader_OpenRange_Call) RunAndReturn(run func(ctx context.Context, rangeHeader *string) (io.ReadCloser, error)) *MockrangeReader_OpenRange_Call {
	_c.Call.Return(run)
	return _c
}
